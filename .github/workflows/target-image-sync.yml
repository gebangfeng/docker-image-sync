name: Target Sync Image
on:
  issues:
    types:
      - opened

permissions:
  issues: write

jobs:
  sync:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'sync image')
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      REGISTRY: ${{ secrets.REGISTRY }}
      NAMESPACE: ${{ secrets.NAMESPACE }}
      USER: ${{ secrets.DOCKER_USERNAME }}
      PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check Issue
      id: get-image
      env:
        IMAGE: "${{ github.event.issue.title }}"
      run: |
        ORIGIN_IMAGE=$(echo "${IMAGE}" | sed 's/ //g')
        if [[ "${ORIGIN_IMAGE}" == *"//"* ]] || [[ "${ORIGIN_IMAGE}" == *" "* ]]; then
          gh issue comment ${{ github.event.issue.number }} -b "镜像 '${ORIGIN_IMAGE}' 不是一个镜像"
          exit 1
        fi
        if [[ "${ORIGIN_IMAGE%%/*}" != *"."* ]] || [[ "${ORIGIN_IMAGE}" != *"/"* ]]; then
          if [[ "${ORIGIN_IMAGE}" != *":"* ]]; then
            gh issue comment ${{ github.event.issue.number }} -b "由于你没有指定tag或者域名将使用默认的仓库\`docker.io\`和默认的tag\`latest\`,如: \`docker.io/${ORIGIN_IMAGE}:latest\`"
            ORIGIN_IMAGE="docker.io/${ORIGIN_IMAGE}:latest"
            gh issue edit ${{ github.event.issue.number }} --title "${ORIGIN_IMAGE}"
          else
            gh issue comment ${{ github.event.issue.number }} -b "由于你没有指定仓库名将使用默认的仓库\`docker.io\`,如: \`docker.io/${ORIGIN_IMAGE}\`"
            ORIGIN_IMAGE="docker.io/${ORIGIN_IMAGE}"
            gh issue edit ${{ github.event.issue.number }} --title "${ORIGIN_IMAGE}"
          fi
        fi
        if [[ "${ORIGIN_IMAGE}" != *":"* ]]; then
          gh issue comment ${{ github.event.issue.number }} -b "由于你没有指定仓库名将使用默认的tag\`latest\`, 如: \`${ORIGIN_IMAGE}:latest\`"
          ORIGIN_IMAGE="${ORIGIN_IMAGE}:latest"
          gh issue edit ${{ github.event.issue.number }} --title "${ORIGIN_IMAGE}"
        fi
        echo "image=${ORIGIN_IMAGE}" >> $GITHUB_OUTPUT

    - name: Check Image
      run: |
        ORIGIN_IMAGE="${{ steps.get-image.outputs.image }}"
        gh issue comment ${{ github.event.issue.number }} -b "镜像 ${ORIGIN_IMAGE} 同步中...<br>[详情请查看](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"

    - name: Set up Docker
      uses: docker/setup-buildx-action@v1

    - name: Install Skopeo
      run: |
        sudo apt-get update
        sudo apt-get install -y skopeo

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Sync Multi-Arch Docker Image to Aliyun
      run: |
        ORIGIN_IMAGE="${{ steps.get-image.outputs.image }}"
        TARGET_IMAGE="${{ secrets.REGISTRY }}/${{ secrets.NAMESPACE }}/${ORIGIN_IMAGE}"

        # Temporary directory for storing image layers
        TEMP_DIR=$(mktemp -d)

        # List of architectures
        ARCHS=("amd64" "arm64" "arm")

        # Pull and copy each architecture
        for ARCH in "${ARCHS[@]}"; do
          skopeo copy --override-arch=$ARCH docker://${ORIGIN_IMAGE} docker-archive:$TEMP_DIR/redis-$ARCH.tar
          skopeo copy docker-archive:$TEMP_DIR/redis-$ARCH.tar docker://${TARGET_IMAGE}
        done

        # Create and push the multi-arch manifest
        skopeo manifest create docker://${TARGET_IMAGE} $TEMP_DIR/redis-amd64.tar $TEMP_DIR/redis-arm64.tar $TEMP_DIR/redis-arm.tar
        skopeo manifest push --dest-creds ${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }} docker://${TARGET_IMAGE}

    - name: Notify Success
      if: success()
      run: |
        ORIGIN_IMAGE="${{ steps.get-image.outputs.image }}"
        gh issue comment ${{ github.event.issue.number }} -b "镜像 ${ORIGIN_IMAGE} 同步完成<br>请使用 ${TARGET_IMAGE} 替代源镜像"
        gh issue edit ${{ github.event.issue.number }} --add-label "sync image succeeded"
        gh issue close ${{ github.event.issue.number }} --reason "completed"

    - name: Fail Sync
      if: failure()
      run: |
        ORIGIN_IMAGE="${{ steps.get-image.outputs.image }}"
        gh issue comment ${{ github.event.issue.number }} -b "镜像 ${ORIGIN_IMAGE} 同步失败[详情请查看](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})<br>请检查 image 是否存在"
        gh issue edit ${{ github.event.issue.number }} --add-label "sync image failure"
        gh issue close ${{ github.event.issue.number }} --reason "not planned"
