name: Target Sync Image
on:
  issues:
    types:
      - opened

# https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
permissions:
  issues: write

jobs:
  sync:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'sync image')
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # REGISTRY: ${{ secrets.REGISTRY }}
      # NAME_SPACE: ${{ secrets.NAME_SPACE }}
      # USER: ${{ secrets.USER }}
      # PASSWORD: ${{ secrets.PASSWORD }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Check Issue
      id: get-image
      env:
        IMAGE: "${{ github.event.issue.title }}"
      run: |
        ORIGIN_IMAGE="${IMAGE}"
        if [[ "${ORIGIN_IMAGE}" == *"//"* ]] || [[ "${ORIGIN_IMAGE}" == *" "* ]]; then
          gh issue comment ${{ github.event.issue.number }} -b "镜像 '${ORIGIN_IMAGE}' 不是一个镜像"
          exit 1
        fi
        if [[ "${ORIGIN_IMAGE%%/*}" != *"."* ]] || [[ "${ORIGIN_IMAGE}" != *"/"* ]]; then
          if [[ "${ORIGIN_IMAGE}" != *":"* ]]; then
            gh issue comment ${{ github.event.issue.number }} -b "镜像 '${ORIGIN_IMAGE}' 不存在呢, 请指定 域名 和 tag, 如: docker.io/${ORIGIN_IMAGE}:latest"
          else
            gh issue comment ${{ github.event.issue.number }} -b "镜像 '${ORIGIN_IMAGE}' 不存在呢, 请指定域名, 如: docker.io/${ORIGIN_IMAGE}"
          fi
          exit 1
        fi
        if [[ "${ORIGIN_IMAGE}" != *":"* ]]; then
          gh issue comment ${{ github.event.issue.number }} -b "镜像 '${ORIGIN_IMAGE}' 不存在呢, 请指定 tag, 如: ${ORIGIN_IMAGE}:latest"
          exit 1
        fi
        echo "image=${ORIGIN_IMAGE}" >> $GITHUB_OUTPUT
    - name: Check Image
      run: |
        ORIGIN_IMAGE="${{ steps.get-image.outputs.image }}"
        gh issue comment ${{ github.event.issue.number }} -b "镜像 ${ORIGIN_IMAGE} 同步中...<br>[详情请查看](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
  
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Sync Docker Image
      run: |
        ORIGIN_IMAGE="${{ steps.get-image.outputs.image }}"
        BASE_IMAGE=$(echo ${ORIGIN_IMAGE} | sed 's/\(.*\):.*/\1/')
        TARGET_IMAGE="${{ secrets.REGISTRY }}/${{ secrets.NAMESPACE }}/${BASE_IMAGE}"
        
        docker pull ${ORIGIN_IMAGE}
        docker tag ${ORIGIN_IMAGE} ${TARGET_IMAGE}
        docker push ${TARGET_IMAGE}
        
        # Capture the response from curl
        RESPONSE=$(curl -s -X POST "${{ secrets.APIURL }}" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.APIKEY }}" \
          -d "{\"namespace\": \"${{ secrets.NAMESPACE }}\" , \"repository\": \"${BASE_IMAGE}\" }")
    
        # Define the expected value
        EXPECTED_VALUE='{"message":"已将仓库设置为公开"}'
    
        # Check if the response matches the expected value
        if [[ "$RESPONSE" == "$EXPECTED_VALUE" ]]; then
          echo "API call was successful and returned the expected value."
          gh issue comment ${{ github.event.issue.number }} -b "镜像 ${ORIGIN_IMAGE} 同步完成<br>请使用 ${TARGET_IMAGE} 替代源镜像"
          gh issue edit ${{ github.event.issue.number }} --add-label "sync image succeeded" -b "IMAGE SYNC"
          gh issue close ${{ github.event.issue.number }} --reason "completed"
        else
          echo "API call did not return the expected value."
          echo "Response: $RESPONSE"
          exit 1
        fi

    # - name: Sync Images
    #   run: |
    #     ORIGIN_IMAGE="${{ steps.get-image.outputs.image }}"
    #     # curl --fail -X PUT "http://127.0.0.1:8000/internal/api/image/sync?image=${ORIGIN_IMAGE}"
    #     # if ! ./hack/verify-allows.sh ./allows.txt "${ORIGIN_IMAGE}"; then
    #     #   gh issue comment ${{ github.event.issue.number }} -b "镜像 ${ORIGIN_IMAGE} 同步完成<br>请使用 m.daocloud.io/${ORIGIN_IMAGE} 替代源镜像<br>这个镜像不在白名单列表里, 在未来可能将无法访问<br>将其添加到[白名单](https://github.com/DaoCloud/public-image-mirror/blob/main/allows.txt)"
    #     # else
    #     #   gh issue comment ${{ github.event.issue.number }} -b "镜像 ${ORIGIN_IMAGE} 同步完成<br>请使用 m.daocloud.io/${ORIGIN_IMAGE} 替代源镜像"
    #     # fi
    #     gh issue comment ${{ github.event.issue.number }} -b "镜像 ${ORIGIN_IMAGE} 同步完成<br>请使用 m.daocloud.io/${ORIGIN_IMAGE} 替代源镜像"
    #     gh issue edit ${{ github.event.issue.number }} --add-label "sync image succeeded" -b "IMAGE SYNC"
    #     gh issue close ${{ github.event.issue.number }} --reason "completed"
    - name: Fail Sync
      if: failure()
      run: |
        ORIGIN_IMAGE="${{ steps.get-image.outputs.image }}"
        gh issue comment ${{ github.event.issue.number }} -b "镜像 ${ORIGIN_IMAGE} 同步失败[详情请查看](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})<br>请检查 image 是否存在, [查看成功例子](https://github.com/DaoCloud/public-image-mirror/issues?q=is%3Aissue+is%3Aclosed+label%3A%22sync+image+succeeded%22)<br>如有疑问请回复 /auto-cc 召唤帮助"
        gh issue edit ${{ github.event.issue.number }} --add-label "sync image failure" -b "IMAGE SYNC"
        gh issue close ${{ github.event.issue.number }} --reason "not planned"
