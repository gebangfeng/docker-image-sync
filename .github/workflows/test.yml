name: Target Sync Image
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag of the image'
        required: true
        default: 'latest'
      image:
        description: 'Image to sync'
        required: true
      platform:
        description: 'Platform'
        required: false
        default: 'linux/amd64'
      email:
        description: 'Notification Email'
        required: false

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Prepare Image Info
      id: prepare
      run: |
        IMAGE="${{ github.event.inputs.image }}"
        TAG="${{ github.event.inputs.tag }}"
        PLATFORM="${{ github.event.inputs.platform }}"
        EMAIL="${{ github.event.inputs.email }}"
        if [[ -z "${TAG}" ]]; then
          TAG="latest"
        fi
        ORIGIN_IMAGE="${IMAGE}:${TAG}"
        echo "image=${ORIGIN_IMAGE}" >> $GITHUB_OUTPUT
        echo "platform=${PLATFORM}" >> $GITHUB_OUTPUT
        echo "email=${EMAIL}" >> $GITHUB_OUTPUT

    - name: Check Image
      run: |
        ORIGIN_IMAGE="${{ steps.prepare.outputs.image }}"

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Sync Docker Image
      run: |
        ORIGIN_IMAGE="${{ steps.prepare.outputs.image }}"
        TARGET_IMAGE="${{ secrets.REGISTRY }}/${{ secrets.NAMESPACE }}/${ORIGIN_IMAGE}"
        docker pull ${ORIGIN_IMAGE}
        docker tag ${ORIGIN_IMAGE} ${TARGET_IMAGE}
        docker push ${TARGET_IMAGE}
        curl -s -X POST "${{ secrets.APIURL }}/docker_metadata/" \
          -H "Content-Type: application/json" \
          -d "`docker inspect ${TARGET_IMAGE}`"
        RESPONSE=$(curl -s -X POST "${{ secrets.APIURL }}/set-image-public/" \
          -H "Content-Type: application/json" \
          -d "{\"namespace\": \"${{ secrets.NAMESPACE }}\" , \"repository\": \"${TARGET_IMAGE}\" }")
        EXPECTED_VALUE='{"message":"已将仓库设置为公开"}'
        if [[ "$RESPONSE" == "$EXPECTED_VALUE" ]]; then
                   if [[ -n "${EMAIL}" ]]; then
            echo "镜像同步已完成，请使用新的镜像: ${TARGET_IMAGE}" ${EMAIL}"
          fi
        else
          echo "API call did not return the expected value."
          echo "Response: $RESPONSE"
          exit 1
         fi

    - name: Fail Sync
      if: failure()
      run: |
        ORIGIN_IMAGE="${{ steps.prepare.outputs.image }}"
        if [[ -n "${EMAIL}" ]]; then
          echo "镜像同步失败，请检查 image 是否存在,请检查错误日志: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        fi
