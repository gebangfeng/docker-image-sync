name: Sync Image Webhook
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag of the image'
        required: true
        default: 'latest'
      image:
        description: 'Image to sync'
        required: true
      platform:
        description: 'Platform'
        required: false
        default: 'linux/amd64'
      email:
        description: 'Notification Email'
        required: false

jobs:
  sync:
    name: Sync Image - ${{ github.event.inputs.image }}:${{ github.event.inputs.tag }}
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Prepare Image Info
      id: prepare
      run: |
        IMAGE="${{ github.event.inputs.image }}"
        TAG="${{ github.event.inputs.tag }}"
        PLATFORM="${{ github.event.inputs.platform }}"
        EMAIL="${{ github.event.inputs.email }}"
        ARCH_TAG=$(echo $PLATFORM | tr '/' '-')
        if [[ -z "${TAG}" ]]; then
          TAG="latest"
        fi
        ORIGIN_IMAGE="${IMAGE}:${TAG}"
        TARGET_TAG="${TAG}-${ARCH_TAG}"
        echo "image=${ORIGIN_IMAGE}" >> $GITHUB_OUTPUT
        echo "platform=${PLATFORM}" >> $GITHUB_OUTPUT
        echo "email=${EMAIL}" >> $GITHUB_OUTPUT
        echo "target_tag=${TARGET_TAG}" >> $GITHUB_OUTPUT

    - name: Check Image
      run: |
        ORIGIN_IMAGE="${{ steps.prepare.outputs.image }}"
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
        platforms: ${{ steps.prepare.outputs.platform }}
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Sync Docker Image
      id: synced
      run: |
        set -e
        {
        ORIGIN_IMAGE="${{ steps.prepare.outputs.image }}"
        PLATFORM=${{ steps.prepare.outputs.platform }}
        TARGET_TAG="${{ steps.prepare.outputs.target_tag }}"
        BASE_IMAGE=$(echo ${ORIGIN_IMAGE} | sed 's/\(.*\):.*/\1/')
        TARGET_IMAGE="${{ secrets.REGISTRY }}/${{ secrets.NAMESPACE }}/${BASE_IMAGE}:${TARGET_TAG}"
        docker pull --platform ${PLATFORM} ${ORIGIN_IMAGE} 
        docker tag ${ORIGIN_IMAGE} ${TARGET_IMAGE}
        docker push ${TARGET_IMAGE}
        curl -s -X POST "${{ secrets.APIURL }}/docker_metadata/" \
          -H "Content-Type: application/json" \
          -d "`docker inspect ${TARGET_IMAGE}`"
        RESPONSE=$(curl -s -X POST "${{ secrets.APIURL }}/set-image-public/" \
          -H "Content-Type: application/json" \
          -d "{\"namespace\": \"${{ secrets.NAMESPACE }}\" , \"repository\": \"${BASE_IMAGE}\" }")
        EXPECTED_VALUE='{"message":"已将仓库设置为公开"}'
        if [[ "$RESPONSE" == "$EXPECTED_VALUE" ]]; then
            echo "镜像同步已完成，请使用新的镜像: ${TARGET_IMAGE}"
            echo "target_image=${TARGET_IMAGE}" >> $GITHUB_OUTPUT
            echo "origin_image=${ORIGIN_IMAGE}" >> $GITHUB_OUTPUT
            echo "target_image_simplify=${BASE_IMAGE}:${TARGET_TAG}" >> $GITHUB_OUTPUT
        else
          echo "API call did not return the expected value."
          echo "Response: $RESPONSE"
          exit 1
        fi
        } 2> error_log.txt
    - name: Send Email Notification
      if: success() && steps.prepare.outputs.email != ''
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{ secrets.EMAIL_SERVER }}
        server_port: ${{ secrets.EMAIL_PORT }}
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: 镜像同步完成
        html_body: |
          镜像同步已完成，请使用新的镜像: `${{ steps.synced.outputs.target_image }}` <br>
          代替旧的镜像 `${{ steps.synced.outputs.origin_image }}` <br>
          CPU平台: ` ${{ steps.prepare.outputs.platform }}` <br>
          查看镜像详细信息和使用快捷复制: [点我直达](https://dockerimage.gbfeng.com/image/${{ steps.synced.outputs.target_image_simplify }}) <br>
          <br>[云原生运维圈镜像站](https://dockerimage.gbfeng.com/)
        convert_markdown: true
        to: ${{ steps.prepare.outputs.email }}
        from: 云原生运维圈镜像站
    - name: Capture Error Log
      if: failure()
      id: capture_error_log
      run: |
        if [ -f error_log.txt ]; then
          ERROR_LOG=$(cat error_log.txt)
          echo "ERROR_LOG=$ERROR_LOG" >> $GITHUB_ENV
        fi
    - name: Send Email Notification
      if: failure() && steps.prepare.outputs.email != ''
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{ secrets.EMAIL_SERVER }}
        server_port: ${{ secrets.EMAIL_PORT }}
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: 镜像同步失败
        html_body: |
          镜像同步失败，请检查 image 是否存在<br>
          详情查看错误日志: `${{ env.ERROR_LOG }}` <br>
          镜像：`${{ steps.prepare.outputs.image }}` <br>
          CPU平台: ` ${{ steps.prepare.outputs.platform }}` <br>
          <br>[云原生运维圈镜像站](https://dockerimage.gbfeng.com/)
        convert_markdown: true
        to: ${{ steps.prepare.outputs.email }}
        from: 云原生运维圈镜像站
